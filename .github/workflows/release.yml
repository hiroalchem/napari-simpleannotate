name: Release and Publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.1, v1.0.0, etc.

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-0 libgl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 xvfb
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
    
    - name: Set up virtual display (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Run tests
      run: |
        pytest -v --color=yes --cov=napari_simpleannotate --cov-report=xml
      env:
        # Set environment variables for headless testing
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99.0
        # Skip GUI tests that may cause segfaults in CI
        CI: true
    
    - name: Run linting
      run: |
        ruff check src/
    
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check built packages
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: built-packages
        path: dist/

  create-release:
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: built-packages
        path: dist/
    
    - name: Extract tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Create a simple changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        
        # Save changelog to output
        {
          echo "changelog<<EOF"
          echo "## Changes in ${{ steps.tag.outputs.tag }}"
          echo ""
          echo "$CHANGELOG"
          echo ""
          echo "## Installation"
          echo ""
          echo "\`\`\`bash"
          echo "pip install napari-simpleannotate==$VERSION"
          echo "\`\`\`"
          echo "EOF"
        } >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: napari-simpleannotate-${{ steps.changelog.outputs.version }}-dist
        asset_content_type: application/zip

  publish-pypi:
    needs: [test, build, create-release]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # OIDC for PyPI trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: built-packages
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use OIDC trusted publishing (recommended)
        # No API token needed if properly configured
        password: ${{ secrets.PYPI_API_TOKEN }}  # Fallback to API token
        verbose: true